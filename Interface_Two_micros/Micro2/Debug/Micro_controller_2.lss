
Micro_controller_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001de6  00001e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800080  00800080  00001e9a  2**0
                  ALLOC
  3 .stab         00001ec0  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001094  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000953f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <main>
      8a:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidPinInit>:
#include"../UART_Header/UART_Register.h"
#include"../../DIO/DIO_Header/DIO_Interface.h"


void USART_voidPinInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Initialize USART PINS*/
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_INPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <USART_voidInit>:

void USART_voidInit(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	u8 Local_UCSRC=0;
     b72:	19 82       	std	Y+1, r1	; 0x01
	/*SET BIT 7 TO SELECT UCSRC REGISTER*/
	SET_BIT(Local_UCSRC,UCSRC_URSEL);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	89 83       	std	Y+1, r24	; 0x01
	/*Mode initially is Asynchronous*/
	CLR_BIT(Local_UCSRC,UCSRC_UMSEL);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 7b       	andi	r24, 0xBF	; 191
     b7e:	89 83       	std	Y+1, r24	; 0x01
	/*Parity mode disabled initially*/
	CLR_BIT(Local_UCSRC,UCSRC_UPM0);
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	8f 7e       	andi	r24, 0xEF	; 239
     b84:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC,UCSRC_UPM1);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	8f 7d       	andi	r24, 0xDF	; 223
     b8a:	89 83       	std	Y+1, r24	; 0x01

	/*Stop bit is 1 initially*/
	CLR_BIT(Local_UCSRC,UCSRC_USBS);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	89 83       	std	Y+1, r24	; 0x01

	/*select 8 bit word size*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24
	SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	84 60       	ori	r24, 0x04	; 4
     baa:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_UCSRC;
     bac:	e0 e4       	ldi	r30, 0x40	; 64
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 83       	st	Z, r24
	/*SET BAUD RATE TO 9600 bit/second*/
	UBBRL = 51;
     bb4:	e9 e2       	ldi	r30, 0x29	; 41
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	83 e3       	ldi	r24, 0x33	; 51
     bba:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_RXEN); //ENABLE receive bit
     bbc:	aa e2       	ldi	r26, 0x2A	; 42
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e2       	ldi	r30, 0x2A	; 42
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 61       	ori	r24, 0x10	; 16
     bc8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN); //ENABLE transmit bit
     bca:	aa e2       	ldi	r26, 0x2A	; 42
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e2       	ldi	r30, 0x2A	; 42
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8c 93       	st	X, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <USART_voidSend>:

void USART_voidSend(u8 Copy_u8data)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
	/*WAIT until transmit buffer is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	82 95       	swap	r24
     bf4:	86 95       	lsr	r24
     bf6:	87 70       	andi	r24, 0x07	; 7
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	a1 f3       	breq	.-24     	; 0xbec <USART_voidSend+0xc>
	UDR= Copy_u8data;
     c04:	ec e2       	ldi	r30, 0x2C	; 44
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	/*wait until receive is complete*/
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     c1c:	eb e2       	ldi	r30, 0x2B	; 43
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	dc f7       	brge	.-10     	; 0xc1c <USART_u8Receive+0x8>
	return UDR;
     c26:	ec e2       	ldi	r30, 0x2C	; 44
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z

}
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <PORT_voidInit>:
#include"../PORT_Header/PORT_Interface.h"
#include"../PORT_Header/PORT_Register.h"


void PORT_voidInit(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     c3a:	ea e3       	ldi	r30, 0x3A	; 58
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
     c42:	e7 e3       	ldi	r30, 0x37	; 55
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	87 e0       	ldi	r24, 0x07	; 7
     c48:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     c4a:	e4 e3       	ldi	r30, 0x34	; 52
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	10 82       	st	Z, r1
	DDRD = PORTA_DIR;
     c50:	e1 e3       	ldi	r30, 0x31	; 49
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
     c58:	eb e3       	ldi	r30, 0x3B	; 59
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
     c5e:	e8 e3       	ldi	r30, 0x38	; 56
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
     c64:	e5 e3       	ldi	r30, 0x35	; 53
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
     c6a:	e2 e3       	ldi	r30, 0x32	; 50
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	10 82       	st	Z, r1
}
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <DIO_u8SetPinDirection>:
#include"../../../COMMON/Bit_wise.h"
#include"../../../COMMON/STD_Types.h"
#include"../DIO_Header/DIO_Interface.h"
#include"../DIO_Header/DIO_Register.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	28 97       	sbiw	r28, 0x08	; 8
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	8a 83       	std	Y+2, r24	; 0x02
     c8c:	6b 83       	std	Y+3, r22	; 0x03
     c8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     c90:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	88 30       	cpi	r24, 0x08	; 8
     c96:	08 f0       	brcs	.+2      	; 0xc9a <DIO_u8SetPinDirection+0x24>
     c98:	f3 c0       	rjmp	.+486    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	88 23       	and	r24, r24
     c9e:	09 f0       	breq	.+2      	; 0xca2 <DIO_u8SetPinDirection+0x2c>
     ca0:	77 c0       	rjmp	.+238    	; 0xd90 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	38 87       	std	Y+8, r19	; 0x08
     caa:	2f 83       	std	Y+7, r18	; 0x07
     cac:	8f 81       	ldd	r24, Y+7	; 0x07
     cae:	98 85       	ldd	r25, Y+8	; 0x08
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	59 f1       	breq	.+86     	; 0xd0c <DIO_u8SetPinDirection+0x96>
     cb6:	2f 81       	ldd	r18, Y+7	; 0x07
     cb8:	38 85       	ldd	r19, Y+8	; 0x08
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	2c f4       	brge	.+10     	; 0xcca <DIO_u8SetPinDirection+0x54>
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	69 f0       	breq	.+26     	; 0xce2 <DIO_u8SetPinDirection+0x6c>
     cc8:	60 c0       	rjmp	.+192    	; 0xd8a <DIO_u8SetPinDirection+0x114>
     cca:	2f 81       	ldd	r18, Y+7	; 0x07
     ccc:	38 85       	ldd	r19, Y+8	; 0x08
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	89 f1       	breq	.+98     	; 0xd36 <DIO_u8SetPinDirection+0xc0>
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	91 05       	cpc	r25, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <DIO_u8SetPinDirection+0x6a>
     cde:	40 c0       	rjmp	.+128    	; 0xd60 <DIO_u8SetPinDirection+0xea>
     ce0:	54 c0       	rjmp	.+168    	; 0xd8a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     ce2:	aa e3       	ldi	r26, 0x3A	; 58
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e3       	ldi	r30, 0x3A	; 58
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_u8SetPinDirection+0x8a>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_u8SetPinDirection+0x86>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	ba c0       	rjmp	.+372    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     d0c:	a7 e3       	ldi	r26, 0x37	; 55
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e3       	ldi	r30, 0x37	; 55
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_u8SetPinDirection+0xb4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_u8SetPinDirection+0xb0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	a5 c0       	rjmp	.+330    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     d36:	a4 e3       	ldi	r26, 0x34	; 52
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0xde>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0xda>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	90 c0       	rjmp	.+288    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     d60:	a1 e3       	ldi	r26, 0x31	; 49
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e1 e3       	ldi	r30, 0x31	; 49
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_u8SetPinDirection+0x108>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_u8SetPinDirection+0x104>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	7b c0       	rjmp	.+246    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=1; break;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	78 c0       	rjmp	.+240    	; 0xe80 <DIO_u8SetPinDirection+0x20a>

			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <DIO_u8SetPinDirection+0x122>
     d96:	72 c0       	rjmp	.+228    	; 0xe7c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3e 83       	std	Y+6, r19	; 0x06
     da0:	2d 83       	std	Y+5, r18	; 0x05
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	49 f1       	breq	.+82     	; 0xdfe <DIO_u8SetPinDirection+0x188>
     dac:	2d 81       	ldd	r18, Y+5	; 0x05
     dae:	3e 81       	ldd	r19, Y+6	; 0x06
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <DIO_u8SetPinDirection+0x14a>
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <DIO_u8SetPinDirection+0x160>
     dbe:	5b c0       	rjmp	.+182    	; 0xe76 <DIO_u8SetPinDirection+0x200>
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	71 f1       	breq	.+92     	; 0xe26 <DIO_u8SetPinDirection+0x1b0>
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	e9 f1       	breq	.+122    	; 0xe4e <DIO_u8SetPinDirection+0x1d8>
     dd4:	50 c0       	rjmp	.+160    	; 0xe76 <DIO_u8SetPinDirection+0x200>
						{
						case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_u8SetPinDirection+0x17e>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_u8SetPinDirection+0x17a>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	41 c0       	rjmp	.+130    	; 0xe80 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     dfe:	a7 e3       	ldi	r26, 0x37	; 55
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirection+0x1a6>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirection+0x1a2>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	2d c0       	rjmp	.+90     	; 0xe80 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     e26:	a4 e3       	ldi	r26, 0x34	; 52
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e4 e3       	ldi	r30, 0x34	; 52
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_u8SetPinDirection+0x1ce>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_u8SetPinDirection+0x1ca>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	19 c0       	rjmp	.+50     	; 0xe80 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     e4e:	a1 e3       	ldi	r26, 0x31	; 49
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x1f6>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x1f2>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <DIO_u8SetPinDirection+0x20a>
						default: Local_u8ErrorState=1; break;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8SetPinDirection+0x20a>

						}
		}
		else
		{
			Local_u8ErrorState=1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState=0;
     e80:	19 82       	std	Y+1, r1	; 0x01
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	28 96       	adiw	r28, 0x08	; 8
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_u8SetPortDirection+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_u8SetPortDirection+0x8>
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     ea8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	3d 83       	std	Y+5, r19	; 0x05
     eb2:	2c 83       	std	Y+4, r18	; 0x04
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <DIO_u8SetPortDirection+0x5c>
     ebe:	2c 81       	ldd	r18, Y+4	; 0x04
     ec0:	3d 81       	ldd	r19, Y+5	; 0x05
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	2c f4       	brge	.+10     	; 0xed2 <DIO_u8SetPortDirection+0x3c>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	61 f0       	breq	.+24     	; 0xee8 <DIO_u8SetPortDirection+0x52>
     ed0:	1e c0       	rjmp	.+60     	; 0xf0e <DIO_u8SetPortDirection+0x78>
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	81 f0       	breq	.+32     	; 0xefc <DIO_u8SetPortDirection+0x66>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	81 f0       	breq	.+32     	; 0xf06 <DIO_u8SetPortDirection+0x70>
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <DIO_u8SetPortDirection+0x78>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
     ee8:	ea e3       	ldi	r30, 0x3A	; 58
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	80 83       	st	Z, r24
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	80 83       	st	Z, r24
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
     efc:	e4 e3       	ldi	r30, 0x34	; 52
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	80 83       	st	Z, r24
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	80 83       	st	Z, r24

	}
	return Local_u8ErrorState;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	28 97       	sbiw	r28, 0x08	; 8
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
     f38:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f3a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	08 f0       	brcs	.+2      	; 0xf44 <DIO_u8SetPinValue+0x24>
     f42:	f0 c0       	rjmp	.+480    	; 0x1124 <DIO_u8SetPinValue+0x204>
		{
			if(Copy_u8Value==DIO_u8PIN_LOW)
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <DIO_u8SetPinValue+0x2c>
     f4a:	77 c0       	rjmp	.+238    	; 0x103a <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	38 87       	std	Y+8, r19	; 0x08
     f54:	2f 83       	std	Y+7, r18	; 0x07
     f56:	8f 81       	ldd	r24, Y+7	; 0x07
     f58:	98 85       	ldd	r25, Y+8	; 0x08
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	91 05       	cpc	r25, r1
     f5e:	59 f1       	breq	.+86     	; 0xfb6 <DIO_u8SetPinValue+0x96>
     f60:	2f 81       	ldd	r18, Y+7	; 0x07
     f62:	38 85       	ldd	r19, Y+8	; 0x08
     f64:	22 30       	cpi	r18, 0x02	; 2
     f66:	31 05       	cpc	r19, r1
     f68:	2c f4       	brge	.+10     	; 0xf74 <DIO_u8SetPinValue+0x54>
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
     f6c:	98 85       	ldd	r25, Y+8	; 0x08
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f0       	breq	.+26     	; 0xf8c <DIO_u8SetPinValue+0x6c>
     f72:	60 c0       	rjmp	.+192    	; 0x1034 <DIO_u8SetPinValue+0x114>
     f74:	2f 81       	ldd	r18, Y+7	; 0x07
     f76:	38 85       	ldd	r19, Y+8	; 0x08
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	89 f1       	breq	.+98     	; 0xfe0 <DIO_u8SetPinValue+0xc0>
     f7e:	8f 81       	ldd	r24, Y+7	; 0x07
     f80:	98 85       	ldd	r25, Y+8	; 0x08
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <DIO_u8SetPinValue+0x6a>
     f88:	40 c0       	rjmp	.+128    	; 0x100a <DIO_u8SetPinValue+0xea>
     f8a:	54 c0       	rjmp	.+168    	; 0x1034 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     f8c:	ab e3       	ldi	r26, 0x3B	; 59
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb e3       	ldi	r30, 0x3B	; 59
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_u8SetPinValue+0x8a>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_u8SetPinValue+0x86>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	b7 c0       	rjmp	.+366    	; 0x1124 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     fb6:	a8 e3       	ldi	r26, 0x38	; 56
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e8 e3       	ldi	r30, 0x38	; 56
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_u8SetPinValue+0xb4>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_u8SetPinValue+0xb0>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	a2 c0       	rjmp	.+324    	; 0x1124 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     fe0:	a5 e3       	ldi	r26, 0x35	; 53
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e3       	ldi	r30, 0x35	; 53
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_u8SetPinValue+0xde>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_u8SetPinValue+0xda>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	8d c0       	rjmp	.+282    	; 0x1124 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    100a:	a2 e3       	ldi	r26, 0x32	; 50
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e2 e3       	ldi	r30, 0x32	; 50
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_u8SetPinValue+0x108>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_u8SetPinValue+0x104>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	78 c0       	rjmp	.+240    	; 0x1124 <DIO_u8SetPinValue+0x204>
				default: Local_u8ErrorState=1; break;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	75 c0       	rjmp	.+234    	; 0x1124 <DIO_u8SetPinValue+0x204>

				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <DIO_u8SetPinValue+0x122>
    1040:	71 c0       	rjmp	.+226    	; 0x1124 <DIO_u8SetPinValue+0x204>
			{
				switch(Copy_u8Port)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	49 f1       	breq	.+82     	; 0x10a8 <DIO_u8SetPinValue+0x188>
    1056:	2d 81       	ldd	r18, Y+5	; 0x05
    1058:	3e 81       	ldd	r19, Y+6	; 0x06
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <DIO_u8SetPinValue+0x14a>
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	61 f0       	breq	.+24     	; 0x1080 <DIO_u8SetPinValue+0x160>
    1068:	5b c0       	rjmp	.+182    	; 0x1120 <DIO_u8SetPinValue+0x200>
    106a:	2d 81       	ldd	r18, Y+5	; 0x05
    106c:	3e 81       	ldd	r19, Y+6	; 0x06
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	71 f1       	breq	.+92     	; 0x10d0 <DIO_u8SetPinValue+0x1b0>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	e9 f1       	breq	.+122    	; 0x10f8 <DIO_u8SetPinValue+0x1d8>
    107e:	50 c0       	rjmp	.+160    	; 0x1120 <DIO_u8SetPinValue+0x200>
							{
							case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1080:	ab e3       	ldi	r26, 0x3B	; 59
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e3       	ldi	r30, 0x3B	; 59
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_u8SetPinValue+0x17e>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_u8SetPinValue+0x17a>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	3e c0       	rjmp	.+124    	; 0x1124 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    10a8:	a8 e3       	ldi	r26, 0x38	; 56
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e3       	ldi	r30, 0x38	; 56
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8SetPinValue+0x1a6>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8SetPinValue+0x1a2>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	2a c0       	rjmp	.+84     	; 0x1124 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    10d0:	a5 e3       	ldi	r26, 0x35	; 53
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_u8SetPinValue+0x1ce>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_u8SetPinValue+0x1ca>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	16 c0       	rjmp	.+44     	; 0x1124 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    10f8:	a2 e3       	ldi	r26, 0x32	; 50
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e3       	ldi	r30, 0x32	; 50
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_u8SetPinValue+0x1f6>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_u8SetPinValue+0x1f2>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8SetPinValue+0x204>
							default: Local_u8ErrorState=1; break;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01

							}
			}

}
	return Local_u8ErrorState;
    1124:	89 81       	ldd	r24, Y+1	; 0x01

}
    1126:	28 96       	adiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_u8SetPortValue+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_u8SetPortValue+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    114a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3d 83       	std	Y+5, r19	; 0x05
    1154:	2c 83       	std	Y+4, r18	; 0x04
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	d1 f0       	breq	.+52     	; 0x1194 <DIO_u8SetPortValue+0x5c>
    1160:	2c 81       	ldd	r18, Y+4	; 0x04
    1162:	3d 81       	ldd	r19, Y+5	; 0x05
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <DIO_u8SetPortValue+0x3c>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <DIO_u8SetPortValue+0x52>
    1172:	1e c0       	rjmp	.+60     	; 0x11b0 <DIO_u8SetPortValue+0x78>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	81 f0       	breq	.+32     	; 0x119e <DIO_u8SetPortValue+0x66>
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <DIO_u8SetPortValue+0x70>
    1188:	13 c0       	rjmp	.+38     	; 0x11b0 <DIO_u8SetPortValue+0x78>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	80 83       	st	Z, r24
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	80 83       	st	Z, r24
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	80 83       	st	Z, r24
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	80 83       	st	Z, r24

		}
	return Local_u8ErrorState;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01

}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <DIO_u8GetPinValue>:
	return Local_u8ErrorState;
}
*/

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_u8GetPinValue+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_u8GetPinValue+0x8>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_return_data=0;
    11d4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_u8GetPinValue+0x1c>
    11dc:	6b c0       	rjmp	.+214    	; 0x12b4 <DIO_u8GetPinValue+0xf2>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <DIO_u8GetPinValue+0x24>
    11e4:	67 c0       	rjmp	.+206    	; 0x12b4 <DIO_u8GetPinValue+0xf2>
	{
		switch(Copy_u8Port)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	4c 81       	ldd	r20, Y+4	; 0x04
    11f2:	5d 81       	ldd	r21, Y+5	; 0x05
    11f4:	41 30       	cpi	r20, 0x01	; 1
    11f6:	51 05       	cpc	r21, r1
    11f8:	41 f1       	breq	.+80     	; 0x124a <DIO_u8GetPinValue+0x88>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	91 05       	cpc	r25, r1
    1202:	34 f4       	brge	.+12     	; 0x1210 <DIO_u8GetPinValue+0x4e>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	21 15       	cp	r18, r1
    120a:	31 05       	cpc	r19, r1
    120c:	61 f0       	breq	.+24     	; 0x1226 <DIO_u8GetPinValue+0x64>
    120e:	52 c0       	rjmp	.+164    	; 0x12b4 <DIO_u8GetPinValue+0xf2>
    1210:	4c 81       	ldd	r20, Y+4	; 0x04
    1212:	5d 81       	ldd	r21, Y+5	; 0x05
    1214:	42 30       	cpi	r20, 0x02	; 2
    1216:	51 05       	cpc	r21, r1
    1218:	51 f1       	breq	.+84     	; 0x126e <DIO_u8GetPinValue+0xac>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	b9 f1       	breq	.+110    	; 0x1292 <DIO_u8GetPinValue+0xd0>
    1224:	47 c0       	rjmp	.+142    	; 0x12b4 <DIO_u8GetPinValue+0xf2>
		{
		case DIO_u8PORTA: Local_return_data= GET_BIT(PINA , Copy_u8Pin); break;
    1226:	e9 e3       	ldi	r30, 0x39	; 57
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_u8GetPinValue+0x7c>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_u8GetPinValue+0x78>
    1242:	ca 01       	movw	r24, r20
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	35 c0       	rjmp	.+106    	; 0x12b4 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTB: Local_return_data= GET_BIT(PINB , Copy_u8Pin); break;
    124a:	e6 e3       	ldi	r30, 0x36	; 54
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8GetPinValue+0xa0>
    125e:	55 95       	asr	r21
    1260:	47 95       	ror	r20
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_u8GetPinValue+0x9c>
    1266:	ca 01       	movw	r24, r20
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	23 c0       	rjmp	.+70     	; 0x12b4 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTC: Local_return_data= GET_BIT(PINC , Copy_u8Pin); break;
    126e:	e3 e3       	ldi	r30, 0x33	; 51
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8GetPinValue+0xc4>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8GetPinValue+0xc0>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	11 c0       	rjmp	.+34     	; 0x12b4 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTD: Local_return_data= GET_BIT(PIND , Copy_u8Pin); break;
    1292:	e0 e3       	ldi	r30, 0x30	; 48
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a9 01       	movw	r20, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_u8GetPinValue+0xe8>
    12a6:	55 95       	asr	r21
    12a8:	47 95       	ror	r20
    12aa:	8a 95       	dec	r24
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_u8GetPinValue+0xe4>
    12ae:	ca 01       	movw	r24, r20
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//Local_u8ErrorState=1;
	}
	return Local_return_data;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <ADC_voidInit>:
static u8* ADC_pu8Reading= NULL;
static void (*ADC_pvCallBackNotificationFunc)(void)= NULL;

u8 ADC_u8BusyState= IDLE;
void ADC_voidInit(void)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	/*Reference voltage selection = AVCC*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    12ce:	a7 e2       	ldi	r26, 0x27	; 39
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e2       	ldi	r30, 0x27	; 39
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 64       	ori	r24, 0x40	; 64
    12da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    12dc:	a7 e2       	ldi	r26, 0x27	; 39
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e2       	ldi	r30, 0x27	; 39
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	8c 93       	st	X, r24
	/*Left adjust activation and read ADCH only*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    12ea:	a7 e2       	ldi	r26, 0x27	; 39
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e7 e2       	ldi	r30, 0x27	; 39
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 62       	ori	r24, 0x20	; 32
    12f6:	8c 93       	st	X, r24
	/*Set PRESCALLER to divide by 128*/
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    12f8:	a6 e2       	ldi	r26, 0x26	; 38
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 e2       	ldi	r30, 0x26	; 38
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1306:	a6 e2       	ldi	r26, 0x26	; 38
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e6 e2       	ldi	r30, 0x26	; 38
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	82 60       	ori	r24, 0x02	; 2
    1312:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1314:	a6 e2       	ldi	r26, 0x26	; 38
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e6 e2       	ldi	r30, 0x26	; 38
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	8c 93       	st	X, r24
	/*Enable ADC Peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1322:	a6 e2       	ldi	r26, 0x26	; 38
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e6 e2       	ldi	r30, 0x26	; 38
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	8c 93       	st	X, r24
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <ADC_u8StartConversionSync>:

u8 ADC_u8StartConversionSync(u8 Copy_u8Channel, u8* Copy_pu8ReadingADC)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	28 97       	sbiw	r28, 0x08	; 8
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	8e 83       	std	Y+6, r24	; 0x06
    134c:	78 87       	std	Y+8, r23	; 0x08
    134e:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
    1350:	1a 82       	std	Y+2, r1	; 0x02
    1352:	1b 82       	std	Y+3, r1	; 0x03
    1354:	1c 82       	std	Y+4, r1	; 0x04
    1356:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
    1358:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
    135a:	80 91 84 00 	lds	r24, 0x0084
    135e:	88 23       	and	r24, r24
    1360:	09 f0       	breq	.+2      	; 0x1364 <ADC_u8StartConversionSync+0x2e>
    1362:	5b c0       	rjmp	.+182    	; 0x141a <ADC_u8StartConversionSync+0xe4>
		{
		/*ADC State is busy*/
	ADC_u8BusyState = BUSY;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 84 00 	sts	0x0084, r24
	/*clear the MUX bits in ADMUX Register */
	ADMUX &= 0b11100000;
    136a:	a7 e2       	ldi	r26, 0x27	; 39
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e7 e2       	ldi	r30, 0x27	; 39
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 7e       	andi	r24, 0xE0	; 224
    1376:	8c 93       	st	X, r24
	/*set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
    1378:	a7 e2       	ldi	r26, 0x27	; 39
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e7 e2       	ldi	r30, 0x27	; 39
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	90 81       	ld	r25, Z
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	89 2b       	or	r24, r25
    1386:	8c 93       	st	X, r24
	/*ADC start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1388:	a6 e2       	ldi	r26, 0x26	; 38
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e6 e2       	ldi	r30, 0x26	; 38
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	8c 93       	st	X, r24
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <ADC_u8StartConversionSync+0x78>

	/*POLLING (busy waiting) until the conversion complete flag is set */
	while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_U32TIMEOUT) ) //AS the bit = zero still in these instruction OR counter less than time out
	{
		Local_u32Counter++;
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	ac 81       	ldd	r26, Y+4	; 0x04
    139e:	bd 81       	ldd	r27, Y+5	; 0x05
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	a1 1d       	adc	r26, r1
    13a4:	b1 1d       	adc	r27, r1
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	ac 83       	std	Y+4, r26	; 0x04
    13ac:	bd 83       	std	Y+5, r27	; 0x05
	ADMUX |= Copy_u8Channel;
	/*ADC start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);

	/*POLLING (busy waiting) until the conversion complete flag is set */
	while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_U32TIMEOUT) ) //AS the bit = zero still in these instruction OR counter less than time out
    13ae:	e6 e2       	ldi	r30, 0x26	; 38
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	82 95       	swap	r24
    13b6:	8f 70       	andi	r24, 0x0F	; 15
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	90 70       	andi	r25, 0x00	; 0
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 f4       	brne	.+24     	; 0x13dc <ADC_u8StartConversionSync+0xa6>
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	9b 81       	ldd	r25, Y+3	; 0x03
    13c8:	ac 81       	ldd	r26, Y+4	; 0x04
    13ca:	bd 81       	ldd	r27, Y+5	; 0x05
    13cc:	80 35       	cpi	r24, 0x50	; 80
    13ce:	23 ec       	ldi	r18, 0xC3	; 195
    13d0:	92 07       	cpc	r25, r18
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	a2 07       	cpc	r26, r18
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	b2 07       	cpc	r27, r18
    13da:	f1 f6       	brne	.-68     	; 0x1398 <ADC_u8StartConversionSync+0x62>
	{
		Local_u32Counter++;

	}
	if(Local_u32Counter==ADC_U32TIMEOUT)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	ac 81       	ldd	r26, Y+4	; 0x04
    13e2:	bd 81       	ldd	r27, Y+5	; 0x05
    13e4:	80 35       	cpi	r24, 0x50	; 80
    13e6:	23 ec       	ldi	r18, 0xC3	; 195
    13e8:	92 07       	cpc	r25, r18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	a2 07       	cpc	r26, r18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	b2 07       	cpc	r27, r18
    13f2:	19 f4       	brne	.+6      	; 0x13fa <ADC_u8StartConversionSync+0xc4>
	{
		/*loop is broken because it exceeds error state */
		Local_u8ErrorState= NOK;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	12 c0       	rjmp	.+36     	; 0x141e <ADC_u8StartConversionSync+0xe8>
	}
	else
	{
		/* loop is broken bec flag is raised */
		/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF); //clear flag by sit its value bec when it call the function again the flag must be set only when conversion is done again
    13fa:	a6 e2       	ldi	r26, 0x26	; 38
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e6 e2       	ldi	r30, 0x26	; 38
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 61       	ori	r24, 0x10	; 16
    1406:	8c 93       	st	X, r24
			/*return the reading in pointer argument*/
			*Copy_pu8ReadingADC= ADCH; //ADCH register
    1408:	e5 e2       	ldi	r30, 0x25	; 37
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	ef 81       	ldd	r30, Y+7	; 0x07
    1410:	f8 85       	ldd	r31, Y+8	; 0x08
    1412:	80 83       	st	Z, r24
			/*ADC Conversion is finished and change state to IDLE*/
			ADC_u8BusyState=IDLE;
    1414:	10 92 84 00 	sts	0x0084, r1
    1418:	02 c0       	rjmp	.+4      	; 0x141e <ADC_u8StartConversionSync+0xe8>
	}
		}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    141e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1420:	28 96       	adiw	r28, 0x08	; 8
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <ADC_u8StartConversionASync>:


u8 ADC_u8StartConversionASync( u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <ADC_u8StartConversionASync+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <ADC_u8StartConversionASync+0x8>
    143a:	00 d0       	rcall	.+0      	; 0x143c <ADC_u8StartConversionASync+0xa>
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	7c 83       	std	Y+4, r23	; 0x04
    1444:	6b 83       	std	Y+3, r22	; 0x03
    1446:	5e 83       	std	Y+6, r21	; 0x06
    1448:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
    144a:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState==IDLE)
    144c:	80 91 84 00 	lds	r24, 0x0084
    1450:	88 23       	and	r24, r24
    1452:	c1 f5       	brne	.+112    	; 0x14c4 <ADC_u8StartConversionASync+0x92>
	{


		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunc == NULL)
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	21 f0       	breq	.+8      	; 0x1464 <ADC_u8StartConversionASync+0x32>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	19 f4       	brne	.+6      	; 0x146a <ADC_u8StartConversionASync+0x38>
		{
			Local_uErrorState= NULL_Pointer;
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	2f c0       	rjmp	.+94     	; 0x14c8 <ADC_u8StartConversionASync+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 84 00 	sts	0x0084, r24
			/*transport the local variables sent to the function in global variables to be able to be used in the ISR function*/
			ADC_pu8Reading =Copy_pu8Reading;
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	90 93 81 00 	sts	0x0081, r25
    1478:	80 93 80 00 	sts	0x0080, r24
			/*initialize the call back notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	90 93 83 00 	sts	0x0083, r25
    1484:	80 93 82 00 	sts	0x0082, r24
			/*clear the MUX bits in ADMUX Register */
				ADMUX &= 0b11100000;
    1488:	a7 e2       	ldi	r26, 0x27	; 39
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e7 e2       	ldi	r30, 0x27	; 39
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 7e       	andi	r24, 0xE0	; 224
    1494:	8c 93       	st	X, r24
				/*set the required channel into the MUX bits*/
				ADMUX |= Copy_u8Channel;
    1496:	a7 e2       	ldi	r26, 0x27	; 39
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e7 e2       	ldi	r30, 0x27	; 39
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	90 81       	ld	r25, Z
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	89 2b       	or	r24, r25
    14a4:	8c 93       	st	X, r24
				/*ADC start conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    14a6:	a6 e2       	ldi	r26, 0x26	; 38
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e6 e2       	ldi	r30, 0x26	; 38
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	8c 93       	st	X, r24
				/*ADC Interrupt Enable
				 * also we need to enable the global interrupt*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    14b4:	a6 e2       	ldi	r26, 0x26	; 38
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e6 e2       	ldi	r30, 0x26	; 38
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <ADC_u8StartConversionASync+0x96>
			}
	}
	else
	{
		Local_uErrorState= BUSY_FUNC;
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uErrorState;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ca:	26 96       	adiw	r28, 0x06	; 6
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	/*Read the ADC result*/
	*ADC_pu8Reading= ADCH;
    1506:	a0 91 80 00 	lds	r26, 0x0080
    150a:	b0 91 81 00 	lds	r27, 0x0081
    150e:	e5 e2       	ldi	r30, 0x25	; 37
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8c 93       	st	X, r24
	/*Make ADC state be IDLE because it finished*/
	ADC_u8BusyState=IDLE;
    1516:	10 92 84 00 	sts	0x0084, r1
	/*Invoke the call back Notification Function*/
	ADC_pvCallBackNotificationFunc();
    151a:	e0 91 82 00 	lds	r30, 0x0082
    151e:	f0 91 83 00 	lds	r31, 0x0083
    1522:	09 95       	icall
	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1524:	a6 e2       	ldi	r26, 0x26	; 38
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e6 e2       	ldi	r30, 0x26	; 38
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	87 7f       	andi	r24, 0xF7	; 247
    1530:	8c 93       	st	X, r24
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <CLCD_voidSendCommand>:
#include"CLCD_Interface.h"
#include"CLCD_Private.h"
#include <util/delay.h>

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	2f 97       	sbiw	r28, 0x0f	; 15
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for sending commands*/
	DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8PORT_OUTPUT);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	6f ef       	ldi	r22, 0xFF	; 255
    1572:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_u8SetPortDirection>
	DIO_u8SetPinValue(DIO_u8PORTB,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>

	/*SET RW pin to low for write*/
	DIO_u8SetPinValue(DIO_u8PORTB,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>

	/*Send command to data pins*/
	DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	6f ef       	ldi	r22, 0xFF	; 255
    158e:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1592:	8f 85       	ldd	r24, Y+15	; 0x0f
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	b9 01       	movw	r22, r18
    159e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(DIO_u8PORTB,CLCD_E_PIN,DIO_u8PIN_HIGH);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e4       	ldi	r27, 0x40	; 64
    15b4:	8b 87       	std	Y+11, r24	; 0x0b
    15b6:	9c 87       	std	Y+12, r25	; 0x0c
    15b8:	ad 87       	std	Y+13, r26	; 0x0d
    15ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15be:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8f 83       	std	Y+7, r24	; 0x07
    15d6:	98 87       	std	Y+8, r25	; 0x08
    15d8:	a9 87       	std	Y+9, r26	; 0x09
    15da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15dc:	6f 81       	ldd	r22, Y+7	; 0x07
    15de:	78 85       	ldd	r23, Y+8	; 0x08
    15e0:	89 85       	ldd	r24, Y+9	; 0x09
    15e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <CLCD_voidSendCommand+0xa6>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <CLCD_voidSendCommand+0x124>
	else if (__tmp > 65535)
    15fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1600:	78 85       	ldd	r23, Y+8	; 0x08
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <CLCD_voidSendCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6b 85       	ldd	r22, Y+11	; 0x0b
    1618:	7c 85       	ldd	r23, Y+12	; 0x0c
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	0f c0       	rjmp	.+30     	; 0x165e <CLCD_voidSendCommand+0x106>
    1640:	88 ec       	ldi	r24, 0xC8	; 200
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <CLCD_voidSendCommand+0xf4>
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <CLCD_voidSendCommand+0xe8>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <CLCD_voidSendCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <CLCD_voidSendCommand+0x130>
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(DIO_u8PORTB,CLCD_E_PIN,DIO_u8PIN_LOW);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
}
    169a:	2f 96       	adiw	r28, 0x0f	; 15
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	2f 97       	sbiw	r28, 0x0f	; 15
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8PORT_OUTPUT);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_u8SetPortDirection>

	/*set RS pin to high for sending data*/
		DIO_u8SetPinValue(DIO_u8PORTB,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>

		/*SET RW pin to low for write*/
		DIO_u8SetPinValue(DIO_u8PORTB,CLCD_RW_PIN,DIO_u8PIN_LOW);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>

		/*Send data to data pins*/
		DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	6f ef       	ldi	r22, 0xFF	; 255
    16e2:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_u8SetPortDirection>

		DIO_u8SetPortValue(DIO_u8PORTA,Copy_u8Data);
    16e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	b9 01       	movw	r22, r18
    16f2:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_u8SetPortValue>
		/*Send enable pulse*/
		DIO_u8SetPinValue(DIO_u8PORTB,CLCD_E_PIN,DIO_u8PIN_HIGH);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	ad 87       	std	Y+13, r26	; 0x0d
    170e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	6b 85       	ldd	r22, Y+11	; 0x0b
    1712:	7c 85       	ldd	r23, Y+12	; 0x0c
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a ef       	ldi	r20, 0xFA	; 250
    171e:	54 e4       	ldi	r21, 0x44	; 68
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8f 83       	std	Y+7, r24	; 0x07
    172a:	98 87       	std	Y+8, r25	; 0x08
    172c:	a9 87       	std	Y+9, r26	; 0x09
    172e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <CLCD_voidSendData+0xa6>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <CLCD_voidSendData+0x124>
	else if (__tmp > 65535)
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	4c f5       	brge	.+82     	; 0x17bc <CLCD_voidSendData+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	6b 85       	ldd	r22, Y+11	; 0x0b
    176c:	7c 85       	ldd	r23, Y+12	; 0x0c
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <CLCD_voidSendData+0x106>
    1794:	88 ec       	ldi	r24, 0xC8	; 200
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <CLCD_voidSendData+0xf4>
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <CLCD_voidSendData+0xe8>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <CLCD_voidSendData+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <CLCD_voidSendData+0x130>
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8PORTB,CLCD_E_PIN,DIO_u8PIN_LOW);
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
}
    17ee:	2f 96       	adiw	r28, 0x0f	; 15
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	2e 97       	sbiw	r28, 0x0e	; 14
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e2       	ldi	r26, 0x20	; 32
    181a:	b2 e4       	ldi	r27, 0x42	; 66
    181c:	8b 87       	std	Y+11, r24	; 0x0b
    181e:	9c 87       	std	Y+12, r25	; 0x0c
    1820:	ad 87       	std	Y+13, r26	; 0x0d
    1822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8f 83       	std	Y+7, r24	; 0x07
    183e:	98 87       	std	Y+8, r25	; 0x08
    1840:	a9 87       	std	Y+9, r26	; 0x09
    1842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <CLCD_voidInit+0x66>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1880:	7c 85       	ldd	r23, Y+12	; 0x0c
    1882:	8d 85       	ldd	r24, Y+13	; 0x0d
    1884:	9e 85       	ldd	r25, Y+14	; 0x0e
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <CLCD_voidInit+0xc6>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidInit+0xb4>
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <CLCD_voidInit+0xa8>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <CLCD_voidInit+0xf0>
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2lines and 5*8 font size*/
	CLCD_voidSendCommand(0b00111000);
    18f8:	88 e3       	ldi	r24, 0x38	; 56
    18fa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>

	/*Display on off control display enable,disable cursor and no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    18fe:	8c e0       	ldi	r24, 0x0C	; 12
    1900:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(0b00000001);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>


}
    190a:	2e 96       	adiw	r28, 0x0e	; 14
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <CLCD_voidSendString>:

void CLCD_voidSendString(char *string)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <CLCD_voidSendString+0x6>
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    192c:	19 82       	std	Y+1, r1	; 0x01
    192e:	0e c0       	rjmp	.+28     	; 0x194c <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(string[counter]);
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	fc 01       	movw	r30, r24
    193c:	e2 0f       	add	r30, r18
    193e:	f3 1f       	adc	r31, r19
    1940:	80 81       	ld	r24, Z
    1942:	0e 94 56 0b 	call	0x16ac	; 0x16ac <CLCD_voidSendData>
}

void CLCD_voidSendString(char *string)
{
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	fc 01       	movw	r30, r24
    1958:	e2 0f       	add	r30, r18
    195a:	f3 1f       	adc	r31, r19
    195c:	80 81       	ld	r24, Z
    195e:	88 23       	and	r24, r24
    1960:	39 f7       	brne	.-50     	; 0x1930 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(string[counter]);
	}
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <CLCD_voidSendNumber>:
}

*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <CLCD_voidSendNumber+0x6>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	9b 83       	std	Y+3, r25	; 0x03
    197c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <CLCD_voidSendNumber+0x32>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	fc 01       	movw	r30, r24
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	80 81       	ld	r24, Z
    1994:	80 5d       	subi	r24, 0xD0	; 208
    1996:	0e 94 56 0b 	call	0x16ac	; 0x16ac <CLCD_voidSendData>
*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	fc 01       	movw	r30, r24
    19ac:	e2 0f       	add	r30, r18
    19ae:	f3 1f       	adc	r31, r19
    19b0:	80 81       	ld	r24, Z
    19b2:	88 23       	and	r24, r24
    19b4:	31 f7       	brne	.-52     	; 0x1982 <CLCD_voidSendNumber+0x14>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
	}
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	u8 data_clear_display= 0x01;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(data_clear_display);
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>
}
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <CLCD_voidGoToXY+0x6>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos == 0)
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	88 23       	and	r24, r24
    19f2:	19 f4       	brne	.+6      	; 0x19fa <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	80 5c       	subi	r24, 0xC0	; 192
    1a04:	89 83       	std	Y+1, r24	; 0x01
	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	CLCD_voidSendCommand(Local_u8Address+128);
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	80 58       	subi	r24, 0x80	; 128
    1a0a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	27 97       	sbiw	r28, 0x07	; 7
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	6d 83       	std	Y+5, r22	; 0x05
    1a34:	4e 83       	std	Y+6, r20	; 0x06
    1a36:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Iterator;
	/*first calculate CGRAM address whose each block is 8 bytes*/
	u8 Local_u8CGRamAddress =0;
    1a38:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	89 83       	std	Y+1, r24	; 0x01

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	80 5c       	subi	r24, 0xC0	; 192
    1a52:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_voidSendCommand>
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1a56:	1a 82       	std	Y+2, r1	; 0x02
    1a58:	0e c0       	rjmp	.+28     	; 0x1a76 <CLCD_voidWriteSpecialChar+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	fc 01       	movw	r30, r24
    1a66:	e2 0f       	add	r30, r18
    1a68:	f3 1f       	adc	r31, r19
    1a6a:	80 81       	ld	r24, Z
    1a6c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <CLCD_voidSendData>
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 30       	cpi	r24, 0x08	; 8
    1a7a:	78 f3       	brcs	.-34     	; 0x1a5a <CLCD_voidWriteSpecialChar+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*Access the DDRAM again To display the pattern since the gotoxy function is carrying a function to access DDRAM*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_voidGoToXY>
	/*Display the pattern written in the CG RAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	0e 94 56 0b 	call	0x16ac	; 0x16ac <CLCD_voidSendData>


}
    1a8a:	27 96       	adiw	r28, 0x07	; 7
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <KEYPAD_Init>:
#include"Keypad_interface.h"
#include"Keypad_private.h"
#include<util/delay.h>

void KEYPAD_Init(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	/*Define Row bins as Input*/
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_INPUT);
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_INPUT);
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_INPUT);
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_INPUT);
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	/*Define column pins as OUTPUT*/
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	64 e0       	ldi	r22, 0x04	; 4
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	65 e0       	ldi	r22, 0x05	; 5
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	66 e0       	ldi	r22, 0x06	; 6
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	67 e0       	ldi	r22, 0x07	; 7
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>
	/*Define Row bins as pulled up*/
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_HIGH);
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	63 e0       	ldi	r22, 0x03	; 3
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	/*Define Columns pins as High*/
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_HIGH);
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	64 e0       	ldi	r22, 0x04	; 4
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_HIGH);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_HIGH);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	66 e0       	ldi	r22, 0x06	; 6
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_HIGH);
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	67 e0       	ldi	r22, 0x07	; 7
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <KPD_u8GetPressedKey>:



char KPD_u8GetPressedKey(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	61 97       	sbiw	r28, 0x11	; 17
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
	char Local_u8PressedKey=NOT_PRESSED;
    1b5e:	19 8a       	std	Y+17, r1	; 0x11
	//u8 Local_u8Pinstate;
	static u8 Local_u8KPDArr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	63 e0       	ldi	r22, 0x03	; 3
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 3b 06 	call	0xc76	; 0xc76 <DIO_u8SetPinDirection>

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    1b6a:	18 8a       	std	Y+16, r1	; 0x10
    1b6c:	dc c0       	rjmp	.+440    	; 0x1d26 <KPD_u8GetPressedKey+0x1dc>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTD,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1b6e:	88 89       	ldd	r24, Y+16	; 0x10
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	fc 01       	movw	r30, r24
    1b76:	e4 59       	subi	r30, 0x94	; 148
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	90 81       	ld	r25, Z
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	69 2f       	mov	r22, r25
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    1b86:	1f 86       	std	Y+15, r1	; 0x0f
    1b88:	bb c0       	rjmp	.+374    	; 0x1d00 <KPD_u8GetPressedKey+0x1b6>
		{
			/*Read current row*/
			//Local_u8Pinstate= DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex]);
			/*check if switch is pressed*/
			if(DIO_u8GetPinValue(DIO_u8PORTD,Local_u8KPDRowArr[Local_u8RowIndex]) == DIO_u8PIN_LOW)
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	fc 01       	movw	r30, r24
    1b92:	e8 59       	subi	r30, 0x98	; 152
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	90 81       	ld	r25, Z
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	69 2f       	mov	r22, r25
    1b9c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <DIO_u8GetPinValue>
    1ba0:	88 23       	and	r24, r24
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <KPD_u8GetPressedKey+0x5c>
    1ba4:	aa c0       	rjmp	.+340    	; 0x1cfa <KPD_u8GetPressedKey+0x1b0>
			{
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	63 e0       	ldi	r22, 0x03	; 3
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a8 e4       	ldi	r26, 0x48	; 72
    1bb6:	b2 e4       	ldi	r27, 0x42	; 66
    1bb8:	8b 87       	std	Y+11, r24	; 0x0b
    1bba:	9c 87       	std	Y+12, r25	; 0x0c
    1bbc:	ad 87       	std	Y+13, r26	; 0x0d
    1bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a ef       	ldi	r20, 0xFA	; 250
    1bce:	54 e4       	ldi	r21, 0x44	; 68
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8f 83       	std	Y+7, r24	; 0x07
    1bda:	98 87       	std	Y+8, r25	; 0x08
    1bdc:	a9 87       	std	Y+9, r26	; 0x09
    1bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <KPD_u8GetPressedKey+0xb8>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <KPD_u8GetPressedKey+0x136>
	else if (__tmp > 65535)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	4f e7       	ldi	r20, 0x7F	; 127
    1c10:	57 e4       	ldi	r21, 0x47	; 71
    1c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	4c f5       	brge	.+82     	; 0x1c6c <KPD_u8GetPressedKey+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e2       	ldi	r20, 0x20	; 32
    1c28:	51 e4       	ldi	r21, 0x41	; 65
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <KPD_u8GetPressedKey+0x118>
    1c44:	88 ec       	ldi	r24, 0xC8	; 200
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <KPD_u8GetPressedKey+0x106>
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <KPD_u8GetPressedKey+0xfa>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <KPD_u8GetPressedKey+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <KPD_u8GetPressedKey+0x142>
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	48 2f       	mov	r20, r24
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	88 89       	ldd	r24, Y+16	; 0x10
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e0 59       	subi	r30, 0x90	; 144
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
    1cb8:	12 c0       	rjmp	.+36     	; 0x1cde <KPD_u8GetPressedKey+0x194>

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
				{
					Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	88 89       	ldd	r24, Y+16	; 0x10
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	e0 59       	subi	r30, 0x90	; 144
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	89 8b       	std	Y+17, r24	; 0x11
				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
    1cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e8 59       	subi	r30, 0x98	; 152
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	90 81       	ld	r25, Z
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	69 2f       	mov	r22, r25
    1cf0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <DIO_u8GetPinValue>
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f3       	breq	.-62     	; 0x1cba <KPD_u8GetPressedKey+0x170>
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <KPD_u8GetPressedKey+0x1be>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTD,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    1cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	08 f4       	brcc	.+2      	; 0x1d08 <KPD_u8GetPressedKey+0x1be>
    1d06:	41 cf       	rjmp	.-382    	; 0x1b8a <KPD_u8GetPressedKey+0x40>
				break;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    1d08:	88 89       	ldd	r24, Y+16	; 0x10
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e4 59       	subi	r30, 0x94	; 148
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	90 81       	ld	r25, Z
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	69 2f       	mov	r22, r25
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_u8SetPinValue>
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    1d20:	88 89       	ldd	r24, Y+16	; 0x10
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	88 8b       	std	Y+16, r24	; 0x10
    1d26:	88 89       	ldd	r24, Y+16	; 0x10
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <KPD_u8GetPressedKey+0x1e4>
    1d2c:	20 cf       	rjmp	.-448    	; 0x1b6e <KPD_u8GetPressedKey+0x24>

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1d2e:	89 89       	ldd	r24, Y+17	; 0x11
}
    1d30:	61 96       	adiw	r28, 0x11	; 17
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <main>:
#include"MCAL/UART/UART_Header/UART_Register.h"
#include"HAL/LCD/CLCD_Interface.h"

/*Micro controller 2*/
int main(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	char received_data;
	USART_voidPinInit();
    1d4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidPinInit>
	CLCD_voidInit();
    1d50:	0e 94 00 0c 	call	0x1800	; 0x1800 <CLCD_voidInit>
	USART_voidInit();
    1d54:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_voidInit>
	CLCD_voidGoToXY(0,0);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_voidGoToXY>

	while(1)
	{
		received_data = USART_u8Receive();
    1d60:	0e 94 0a 06 	call	0xc14	; 0xc14 <USART_u8Receive>
    1d64:	89 83       	std	Y+1, r24	; 0x01
		if(received_data != '\0')
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	88 23       	and	r24, r24
    1d6a:	d1 f3       	breq	.-12     	; 0x1d60 <main+0x1e>
		{
			CLCD_voidSendData(received_data);
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <CLCD_voidSendData>
    1d72:	f6 cf       	rjmp	.-20     	; 0x1d60 <main+0x1e>

00001d74 <__prologue_saves__>:
    1d74:	2f 92       	push	r2
    1d76:	3f 92       	push	r3
    1d78:	4f 92       	push	r4
    1d7a:	5f 92       	push	r5
    1d7c:	6f 92       	push	r6
    1d7e:	7f 92       	push	r7
    1d80:	8f 92       	push	r8
    1d82:	9f 92       	push	r9
    1d84:	af 92       	push	r10
    1d86:	bf 92       	push	r11
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	ca 1b       	sub	r28, r26
    1d9e:	db 0b       	sbc	r29, r27
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	09 94       	ijmp

00001dac <__epilogue_restores__>:
    1dac:	2a 88       	ldd	r2, Y+18	; 0x12
    1dae:	39 88       	ldd	r3, Y+17	; 0x11
    1db0:	48 88       	ldd	r4, Y+16	; 0x10
    1db2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1db6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1db8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dbe:	b9 84       	ldd	r11, Y+9	; 0x09
    1dc0:	c8 84       	ldd	r12, Y+8	; 0x08
    1dc2:	df 80       	ldd	r13, Y+7	; 0x07
    1dc4:	ee 80       	ldd	r14, Y+6	; 0x06
    1dc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc8:	0c 81       	ldd	r16, Y+4	; 0x04
    1dca:	1b 81       	ldd	r17, Y+3	; 0x03
    1dcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1dce:	b9 81       	ldd	r27, Y+1	; 0x01
    1dd0:	ce 0f       	add	r28, r30
    1dd2:	d1 1d       	adc	r29, r1
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	ed 01       	movw	r28, r26
    1de0:	08 95       	ret

00001de2 <_exit>:
    1de2:	f8 94       	cli

00001de4 <__stop_program>:
    1de4:	ff cf       	rjmp	.-2      	; 0x1de4 <__stop_program>
